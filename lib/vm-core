#!/bin/sh
#-------------------------------------------------------------------------+
# Copyright (C) 2015 Matt Churchyard (churchers@gmail.com)
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# list virtual machines
__vm_list(){
	local _name _guest _cpu _memory _run _vm _auto _num _comconsole
	local _format="%-15s %-10s %-6s %-9s %-12s %-20s %-10s\n"

	printf "${_format}" "NAME" "GUEST" "CPU" "MEMORY" "AUTOSTART" "STATE" "COMCONSOLE"

	ls -1 "${vm_dir}" | \
	while read _name; do
		if [ -e "${vm_dir}/${_name}/${_name}.conf" ]; then
			_num=1
			_auto="No"
			_run=$(ps ax | grep " ${_name} [(]bhyve" |awk '{print $1}')
			_guest=$(sysrc -inqf "${vm_dir}/${_name}/${_name}.conf" guest)
			_cpu=$(sysrc -inqf "${vm_dir}/${_name}/${_name}.conf" cpu)
			_memory=$(sysrc -inqf "${vm_dir}/${_name}/${_name}.conf" memory)
			_comconsole=$(sysrc -inqf "${vm_dir}/${_name}/${_name}.conf" comconsole)
			_comconsole=${_comconsole:=com1}

			# see if bhyve running
			if [ -n "${_run}" ]; then
				_run="Running (${_run})"
			else
				_run="Stopped"
			fi

			# if no bhyve, look for bhyveload/grub-bhyve
			if [ "${_run}" = "Stopped" ]; then
				_run=$(ps ax |grep -E "[b]hyveload|[g]rub-bhyve" |grep -E "[ ]${_name}$" |awk '{print $1}')

				if [ -n "${_run}" ]; then
					_run="Bootloader"
				else
					_run="Stopped"
				fi
			fi

			for _vm in ${vm_list}; do
				[ "${_vm}" = "${_name}" ] && _auto="Yes [${_num}]"
				_num=$(($_num + 1))
			done

			printf "${_format}" "${_name}" "${_guest}" "${_cpu}" "${_memory}" "${_auto}" "${_run}" "${_comconsole}"
		fi
	done
}

# create a new virtual machine
__vm_create(){
	local _name
	local _template _opt _size _vmdir _disk _disk_dev

	while getopts t:s: _opt ; do
		case $_opt in
			t)
				_template=${OPTARG}
				;;
			s)
				_size=${OPTARG}
				;;
			*)
				__usage
				;;
		esac
	done

	shift $((OPTIND - 1))
	_name=$1

	[ -z "$_size" ] && _size="20G"
	[ -z "$_template" ] && _template="default"

	[ ! -f "${vm_dir}/.templates/${_template}.conf" ] && \
		__err "unable to find template ${vm_dir}/.templates/${_template}.conf"

	# we need to get disk0 name and device type from the template
	_disk=$(sysrc -inqf "${vm_dir}/.templates/${_template}.conf" disk0_name)
	_disk_dev=$(sysrc -inqf "${vm_dir}/.templates/${_template}.conf" disk0_dev)
	[ -z "${_disk}" ] && __err "template is missing disk0_name specification"

	# get the directory to store our vm data in
	_vmdir="${vm_dir}/${_name}"
	[ -e "${_vmdir}" ] && __err "directory ${_vmdir} already exists"

	# if we're on zfs, make a new filesystem
	__zfs_make_dataset "${_name}"

	[ ! -d "${_vmdir}" ] && mkdir "${_vmdir}"
	[ ! -d "${_vmdir}" ] && __err "unable to create virtual machine directory ${_vmdir}"

	cp "${vm_dir}/.templates/${_template}.conf" "${_vmdir}/${_name}.conf"
	[ $? -ne 0 ] && __err "unable to copy template to virtual machine directory"

	# create the disk
	case "${_disk_dev}" in 
		zvol)
			__zfs_make_zvol "${_name}/${_disk}" "${_size}"
			;;			
		sparse-zvol)
			__zfs_make_zvol "${_name}/${_disk}" "${_size}" "1"
			;;
		*)
			truncate -s "${_size}" "${_vmdir}/${_disk}"
			[ $? -ne 0 ] && __err "failed to create sparse file for disk image"
			;;
	esac
}

# install os to a virtual machine
__vm_install(){
	local _name="$1"
	local _iso="$2"

	[ -z "${_name}" -o -z "${_iso}" ] && __usage

	# just run start with an iso
	__vm_start "$1" "$2"
}

# start all virtual machines listed in rc.conf:$vm_list
__vm_startall(){
	local _vm _done _conf

	[ -z "${vm_list}" ] && exit

	: ${vm_delay:=5}

	for _vm in ${vm_list}; do
		[ -n "${_done}" ] && sleep ${vm_delay}

		# check conf file just to make sure not an obvious typo in rc.conf
		# if the vm is not configured correctly __vm_start will exit
		# causing any further vms to not be started
		_conf="${vm_dir}/${_vm}/${_vm}.conf"

		if [ -f "${_conf}" ]; then
			echo "Starting ${_vm}..."
			__vm_start "${_vm}"
			_done=1
		fi
	done
}

# stop all bhyve instances
# note this will also stop instances not started by vm-bhyve
__vm_stopall(){
	local _pids=$(ps ax | grep "[(]bhyve)" | awk '{print $1}')

	echo "Shutting down all bhyve virtual machines"
	killall bhyve
	wait_for_pids ${_pids}
}

# start a virtual machine
__vm_start(){
	local _name="$1"
	local _iso="$2"
	local _conf _host
	local _memory _guest _disk

	_conf="${vm_dir}/${_name}/${_name}.conf"

	[ -z "${_name}" ] && __usage
	[ ! -f "${_conf}" ] && __err "${_name} does not seem to be a valid virtual machine"

	if [ -e "${vm_dir}/${_name}/run.lock" ]; then
		_host=$(head -n 1 "${vm_dir}/${_name}/run.lock")
		__err "${_name} appears to already be running on ${_host} (locked)"
	fi

	# check basic settings before going into background mode
	_memory=$(sysrc -inqf "${_conf}" memory)
	_guest=$(sysrc -inqf "${_conf}" guest)
	_disk=$(sysrc -inqf "${_conf}" disk0_name)

	[ -z "${_memory}" -o -z "${_guest}" -o -z "${_disk}" ] && \
		__err "incomplete virtual machine configuration"

	# create a console
	_com=$(__vm_create_console)

	# run background process to actually start bhyve
	# this will run as long as vm is running, including restarting bhyve after guest reboot
	$0 _run "${_name}" "${_com}" "${_iso}" >/dev/null 2>&1 &
}

# run a virtual machine
# this is the background process that does all the work
__vm_run(){
	local _name="$1"
	local _com="$2"
	local _iso="$3" _iso_dev
	local _cpu _memory _bootdisk _bootdisk_dev _guest _guest_support _uefi _comconsole
	local _conf _devices="" _slot=7 _prislot=3 _func=0 _prifunc=0 _taplist _exit

	_conf="${vm_dir}/${_name}/${_name}.conf"
	_cpu=$(sysrc -inqf "${_conf}" cpu)
	_memory=$(sysrc -inqf "${_conf}" memory)
	_guest=$(sysrc -inqf "${_conf}" guest)
	_bootdisk=$(sysrc -inqf "${_conf}" disk0_name)
	_bootdisk_dev=$(sysrc -inqf "${_conf}" disk0_dev)
	_uefi=$(sysrc -inqf "${_conf}" uefi)
	_comconsole=$(sysrc -inqf "${_conf}" comconsole)
	_comconsole=${_comconsole:=com1}

	__log "guest" "${_name}" "initialising"
	__log "guest" "${_name}" " [guest: ${_guest}]"
	__log "guest" "${_name}" " [uefi: ${_uefi:-no}]"
	__log "guest" "${_name}" " [cpu: ${_cpu}]"
	__log "guest" "${_name}" " [memory: ${_memory}]"
	__log "guest" "${_name}" " [comconsole: ${_comconsole}]"
	__log "guest" "${_name}" " [primary disk: ${_bootdisk}]"
	__log "guest" "${_name}" " [primary disk dev: ${_bootdisk_dev:-raw}]"

	# check basic settings
	if [ -z "${_guest}" -o -z "${_cpu}" -o -z "${_memory}" -o -z "${_bootdisk}" ]; then
		__log "guest" "${_name}" "unable to start - missing required configuration"
		exit 15
	fi

	if [ -n "${_uefi}" ]; then
		if [ ! -e "${vm_dir}/.config/BHYVE_UEFI.fd" ]; then
			__log "guest" "${_name}" "please download uefi firmware to ${vm_dir}/.config/BHYVE_UEFI.fd"
			exit 15
		fi
	fi

	# try to find guest support
	_guest_support=$(type "__guest_${_guest}")
	_guest_support=$(echo "${_guest_support}" | grep "shell function")

	if [ -z "${_guest_support}" ]; then
		__log "guest" "${_name}" "unsupported guest type: ${_guest}"
		exit 15
	fi

	# complete the boot disk path
	_bootdisk=$(__vm_get_disk_path "${_name}" "${_bootdisk}" "${_bootdisk_dev}")

	# build bhyve device string
	__vm_bhyve_device_basic
	__vm_bhyve_device_disks
	__vm_bhyve_device_networking
	__vm_bhyve_device_passthru

	__vm_lock "${_name}"
	__log "guest" "${_name}" "booting"

	while [ 1 ]; do

		# destroy existing vmm
		# freebsd seems happy to run a bhyveload/bhyve loop
		# grub-bhyve doesn't seem to like it
		# Peter says don't destroy in Windows instructions, so don't if in UEFI mode
		if [ -e "/dev/vmm/${_name}" -a -z "${_uefi}" ]; then
			bhyvectl --vm="${_name}" --destroy >/dev/null 2>&1
			if [ $? -ne 0 ]; then
				__log "guest" "${_name}" "failed to destroy existing vmm device"
				_exit=15
				break
			fi
		fi

		# load guest
		if [ -n "${_iso}" ]; then
			_iso_dev="-s ${_prislot},ahci-cd,${vm_dir}/.iso/${_iso}"
			eval "__guest_${_guest}" "install"
		else
			eval "__guest_${_guest}" "run"
		fi

		# check no errors
		if [ ${_exit} -ne 0 ]; then
			__log "guest" "${_name}" "loader returned error ${_exit}"
			break
		fi

		__log "guest" "${_name}" " [bhyve devices: ${_devices}]"
		__log "guest" "${_name}" " [bhyve console: ${_comconsole},${_com}]"
		[ -n "${_iso_dev}" ] && __log "guest" "${_name}" " [bhyve iso device: ${_iso_dev}]"
		__log "guest" "${_name}" "starting bhyve"

		# acutlly run bhyve!
		# we're already in the background so we just wait for it to exit
		if [ -z "${_uefi}" ]; then
			bhyve -c ${_cpu} -m ${_memory} -AHP \
				 ${_devices} \
				 ${_iso_dev} \
				 -l ${_comconsole},/dev/${_com} \
				 ${_name}
		else
			bhyve -c ${_cpu} -m ${_memory} -Hw \
				 ${_devices} \
				 ${_iso_dev} \
				 -l ${_comconsole},/dev/${_com} \
				 -l bootrom,${vm_dir}/.config/BHYVE_UEFI.fd \
				 ${_name}
		fi

		# get bhyve exit code
		_exit=$?
		__log "guest" "${_name}" "bhyve exited with status ${_exit}"

		# if 0, guest rebooted so continue loop
		# anything else we break and shutdown
		[ $_exit -ne 0 ] && break
		__log "guest" "${_name}" "restarting"

		# remove install iso so guest reboots from disk
		# after install bhyve will still get install cd until a full shutdown+restart
		_iso=""
	done

	# destroy taps
	for _devices in ${_taplist}; do
		__log "guest" "${_name}" "destroying network device ${_devices}"
		ifconfig "${_devices}" destroy
	done

	__log "guest" "${_name}" "stopped"
	bhyvectl --destroy --vm=${_name}
	__vm_unlock "${_name}"
	exit ${_exit}
}

# lock a vm
# stop another instance being started on this or another host
__vm_lock(){
	local _name="$1"
	local _host

	_host=$(hostname)
	echo "${_host}" > "${vm_dir}/${_name}/run.lock"
}

# unlock a vm
__vm_unlock(){
	local _name="$1"

	unlink "${vm_dir}/${_name}/run.lock"
}

# get bhyve device string for basic devices
# hostbridge & lpc on their own slots
__vm_bhyve_device_basic(){

	_devices="-s 0,hostbridge -s 31,lpc"
}

# get bhyve device string for disk devices
__vm_bhyve_device_disks(){
	local _disk _type _dev _path
	local _num=0

	# get disks
	while [ 1 ]; do
		_disk=$(sysrc -inqf "${_conf}" "disk${_num}_name")
		_type=$(sysrc -inqf "${_conf}" "disk${_num}_type")
		_dev=$(sysrc -inqf "${_conf}" "disk${_num}_dev")

		if [ -n "${_disk}" -a -n "${_type}" ]; then
			# we need to move slot if we've hit function 8
			if [ ${_prifunc} -ge 8 ]; then
				_prifunc=0
				_prislot=$(($_prislot + 1))
			fi

			_path=$(__vm_get_disk_path "${_name}" "${_disk}" "${_dev}")
			_devices="${_devices} -s ${_prislot}:${_prifunc},${_type},${_path}"

			if [ -n "${_uefi}" ]; then
				_prislot=$(($_prislot + 1))
			else
				_prifunc=$(($_prifunc + 1))
			fi
		else
			break
		fi

		_num=$(($_num + 1))
	done

	if [ ${_num} -ge 1 -a -z "${_uefi}" ]; then
		_prislot=$(($_prislot + 1))
		_prifunc=0
	fi
}

# get bhyve device string for networking
# we add each tap to __taplist from __vm_run as it
# needs to clean them up afterwards
__vm_bhyve_device_networking(){
	local _type _switch _tap _sid
	local _num=0

	while [ 1 ]; do
		_type=$(sysrc -inqf "${_conf}" "network${_num}_type")
		_switch=$(sysrc -inqf "${_conf}" "network${_num}_switch")

		if [ -n "${_type}" -a -n "${_switch}" ]; then
			_tap=$(ifconfig tap create)

			if [ -n "${_tap}" ]; then
				# move slot if we've hit function 8
				if [ ${_func} -ge 8 ]; then
					_func=0
					_slot=$(($_slot + 1))
				fi

				__log "guest" "${_name}" "created network device ${_tap}"
				ifconfig "${_tap}" description "vmnet-${_name}-${_num}-${_switch}"
				_sid=$(__switch_get_ident "${_switch}")

				[ -n "${_sid}" ] && ifconfig "${_sid}" addm "${_tap}"

				_devices="${_devices} -s ${_slot}:${_func},${_type},${_tap}"
				_func=$(($_func + 1))

				[ -n "${_taplist}" ] && _taplist="${_taplist} "
				_taplist="${_taplist}${_tap}"
			fi
		else
			break
		fi

		_num=$(($_num + 1))
	done

	if [ ${_num} -ge 1 ]; then
		_slot=$(($_slot + 1))
		_func=0
	fi
}

# get any pci passthrough devices
__vm_bhyve_device_passthru(){
	local _dev _orig_slot _orig_func
	local _last_orig_slot
	local _num=0

	while [ 1 ]; do
		_dev=$(sysrc -inqf "${_conf}" "passthru${_num}")

		if [ -n "${_dev}" ]; then
			_orig_slot=$(echo "${_dev}" | awk -F'/' '{print $1}')
			_orig_func=$(echo "${_dev}" | awk -F'/' '{print $3}')

			# only move to new slot if the original device is on a different slot to the last one.
			# if user wants to passthru a device that has multiple functions which must stay together
			# on one slot, they should be together in configuration file
			if [ -n "${_last_orig_slot}" -a "${_last_orig_slot}" != "${_orig_slot}" ]; then
				_slot=$(($_slot + 1))
			fi

			# we use the original function number for all devices.
			# does this work if you only pass through function 1 or 2, and leave 0 empty?
			_devices="${_devices} -s ${_slot}:${_orig_func},passthru,${_dev}"
			_last_orig_slot=$(echo "${_dev}" | awk -F'/' '{print $1}')
		else
			break
		fi

		_num=$(($_num + 1))
	done

	if [ ${_num} -ge 1 ]; then
	        _slot=$(($_slot + 1))
	fi
}

# get the path to a disk image depending on type
__vm_get_disk_path(){
	local _name="$1"
	local _disk="$2"
	local _disk_dev="$3"
	local _path

	case "${_disk_dev}" in
		zvol)
			;&
		sparse-zvol)
			# need to look at this, don't really want to reference VM_ZFS* variables here
			_path="/dev/zvol/${VM_ZFS_DATASET}/${_name}/${_disk}"
			;;
		*)
			_path="${vm_dir}/${_name}/${_disk}"
			;;
	esac

	echo "${_path}"
}

# stop vm
__vm_stop(){
	local _name="$1"
	local _pid

	[ -z "${_name}" ] && __usage
	[ ! -e "/dev/vmm/${_name}" ] && __err "${_name} doesn't appear to be a running virtual machine"

	_pid=$(ps ax | grep ": ${_name} [(]bhyve)" | awk '{print $1}')
	[ -z "${_pid}" ] && __err "unable to locate process id for this virtual machine"

	kill "${_pid}"
}

# force reset
__vm_reset(){
	local _name="$1"

	[ -z "${_name}" ] && __usage
	[ ! -e "/dev/vmm/${_name}" ] && __err "${_name} doesn't appear to be a running virtual machine"

	__confirm "Are you sure you want to forcefully reset this virtual machine" || exit 0
	bhyvectl --force-reset --vm=${_name}
}

# force poweroff
__vm_poweroff(){
	local _name="$1"

	[ -z "${_name}" ] && __usage
	[ ! -e "/dev/vmm/${_name}" ] && __err "${_name} doesn't appear to be a running virtual machine"

	__confirm "Are you sure you want to forcefully poweroff this virtual machine" || exit 0
	bhyvectl --force-poweroff --vm=${_name}
}

# destroy
__vm_destroy(){
	local _name="$1"

	[ -z "${_name}" ] && __usage
	[ ! -e "${vm_dir}/${_name}" ] && __err "${_name} doesn't appear to be a valid virtual machine"

	__confirm "Are you sure you want to completely remove this virtual machine" || exit 0
	__zfs_destroy_dataset "${_name}"
	[ -e "${vm_dir}/${_name}" ] && rm -R "${vm_dir}/${_name}"
}

# console
__vm_console(){
	local _name="$1"
	local _console

	[ -z "${_name}" ] && __usage
	[ ! -e "/dev/vmm/${_name}" ] && __err "${_name} doesn't appear to be a running virtual machine"

	_console=$(ps ax | grep "[_]run ${_name} " | awk '{print $9}' | rev | cut -c 2- | rev)
	[ -z "${_console}" ] && __err "unable to locate console device for this virtual machine"

	cu -l "/dev/${_console}B"
}

# configure a machine (edit the configuration file)
__vm_configure(){
	local _name="$1"

	[ -z "${_name}" ] && __usage
	[ ! -e "${vm_dir}/${_name}/${_name}.conf" ] && \
		__err "cannot locate configuration file for virtual machine: ${_name}"

	$EDITOR "${vm_dir}/${_name}/${_name}.conf"
}

# list iso images or get a new one
__vm_iso(){
	local _url="$1"

	if [ -n "${_url}" ]; then
		fetch -o "${vm_dir}/.iso" "${_url}"
	else
		echo "FILENAME"
		ls -1 "${vm_dir}/.iso"
	fi
}

# create a new console for a vm
# for now we are using nmdm
__vm_create_console(){
	local _ls
	local _num=0

	# loop until we find an available nmdm
	# using -e seemed to create devices so now scanning ls
	while [ 1 ]; do
		_ls=$(ls -1 /dev | grep "nmdm${_num}A")
		[ -z "${_ls}" ] && break
		_num=$(($_num + 1))
	done

	echo "nmdm${_num}A"
}
